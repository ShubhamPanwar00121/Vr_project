//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Assets/XRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;


namespace Assets.Project.ChessEngine
{
    public partial class @XRInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @XRInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInputActions"",
    ""maps"": [
        {
            ""name"": ""New action map"",
            ""id"": ""68d49f3d-c76e-4595-8a85-e513ae93a738"",
            ""actions"": [
                {
                    ""name"": ""HandMenuToggle"",
                    ""type"": ""Button"",
                    ""id"": ""1742f1cd-a550-497b-945d-143a9ebe9834"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetPieces"",
                    ""type"": ""Button"",
                    ""id"": ""01a11299-33e9-47d9-8bdb-7c7da6c26f5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DestroyPieces"",
                    ""type"": ""Button"",
                    ""id"": ""226ac376-050c-4987-a4dc-e1cc54b1c178"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""83f365f9-eedb-47d9-9472-adf4b0619596"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandMenuToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""496c3a9e-b1f9-44a1-a79a-d191fdf10948"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DestroyPieces"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d0bc95a-b634-4af9-9c5f-0e76b3cbcf74"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetPieces"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // New action map
            m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
            m_Newactionmap_HandMenuToggle = m_Newactionmap.FindAction("HandMenuToggle", throwIfNotFound: true);
            m_Newactionmap_ResetPieces = m_Newactionmap.FindAction("ResetPieces", throwIfNotFound: true);
            m_Newactionmap_DestroyPieces = m_Newactionmap.FindAction("DestroyPieces", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // New action map
        private readonly InputActionMap m_Newactionmap;
        private List<INewactionmapActions> m_NewactionmapActionsCallbackInterfaces = new List<INewactionmapActions>();
        private readonly InputAction m_Newactionmap_HandMenuToggle;
        private readonly InputAction m_Newactionmap_ResetPieces;
        private readonly InputAction m_Newactionmap_DestroyPieces;
        public struct NewactionmapActions
        {
            private @XRInputActions m_Wrapper;
            public NewactionmapActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @HandMenuToggle => m_Wrapper.m_Newactionmap_HandMenuToggle;
            public InputAction @ResetPieces => m_Wrapper.m_Newactionmap_ResetPieces;
            public InputAction @DestroyPieces => m_Wrapper.m_Newactionmap_DestroyPieces;
            public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
            public void AddCallbacks(INewactionmapActions instance)
            {
                if (instance == null || m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Add(instance);
                @HandMenuToggle.started += instance.OnHandMenuToggle;
                @HandMenuToggle.performed += instance.OnHandMenuToggle;
                @HandMenuToggle.canceled += instance.OnHandMenuToggle;
                @ResetPieces.started += instance.OnResetPieces;
                @ResetPieces.performed += instance.OnResetPieces;
                @ResetPieces.canceled += instance.OnResetPieces;
                @DestroyPieces.started += instance.OnDestroyPieces;
                @DestroyPieces.performed += instance.OnDestroyPieces;
                @DestroyPieces.canceled += instance.OnDestroyPieces;
            }

            private void UnregisterCallbacks(INewactionmapActions instance)
            {
                @HandMenuToggle.started -= instance.OnHandMenuToggle;
                @HandMenuToggle.performed -= instance.OnHandMenuToggle;
                @HandMenuToggle.canceled -= instance.OnHandMenuToggle;
                @ResetPieces.started -= instance.OnResetPieces;
                @ResetPieces.performed -= instance.OnResetPieces;
                @ResetPieces.canceled -= instance.OnResetPieces;
                @DestroyPieces.started -= instance.OnDestroyPieces;
                @DestroyPieces.performed -= instance.OnDestroyPieces;
                @DestroyPieces.canceled -= instance.OnDestroyPieces;
            }

            public void RemoveCallbacks(INewactionmapActions instance)
            {
                if (m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(INewactionmapActions instance)
            {
                foreach (var item in m_Wrapper.m_NewactionmapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
        public interface INewactionmapActions
        {
            void OnHandMenuToggle(InputAction.CallbackContext context);
            void OnResetPieces(InputAction.CallbackContext context);
            void OnDestroyPieces(InputAction.CallbackContext context);
        }
    }
}